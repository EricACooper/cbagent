#!/usr/bin/env python

import logging
import logging.config
import time
import sys
import signal
from optparse import OptionParser

from metadata.visit import main as visit,\
    url_after, url_before, VISIT_ENTRY_FUNCS
from libcarbon.carbon_feeder import CarbonFeeder
from libcbtop.visitor_cb import VisitorCallback
from libcbtop.bls_helper import BLSHelper

def handle_signal(signum, frame):
    """
    Handles registered signals and exit.
    """
    logging.info("received signal %s, aborting" % signum)

    BLSHelper.exit_fullscreen()

    print "cleaning up..."

    global ctl
    ctl["run_ok"] = False

def usage():
    # TODO usage printout
    sys.exit(-1)

def main(ctl, vc, server, port=8091, path="/pools/default"):

    visit_entry_func = VISIT_ENTRY_FUNCS.copy()
    visit_entry_func["collect_mc_stats"] = vc.collect_mc_stats

    visit(server, port, path,
          {"fast": vc.store_fast,
           "slow": vc.store_slow},
          {"url_before": url_before,
           "url_after": url_after},
          entry_funcs=visit_entry_func, ctl=ctl)

if __name__ == "__main__":

    signal.signal(signal.SIGINT, handle_signal)

    logging.config.fileConfig("logging.conf")

    parser = OptionParser()
    parser.add_option("-f", "--freq", dest="freq", default="5",
        help="stats polling frequency (sec)")
    parser.add_option("-c", "--carbon", dest="carbon", default="127.0.0.1",
        help="hostname or ip address of the carbon stats server")
    parser.add_option("-s", "--server", dest="server", default="127.0.0.1",
        help="hostname or ip address of the target server")
    (options, args) = parser.parse_args()

    _carbon = options.carbon
    _server = options.server

    try:
        _freq = int(options.freq)
    except ValueError, e:
        logging.error("invalid polling freq: %s" % options.freq)
        usage()

    c_feeder = CarbonFeeder(_carbon)
    vc = VisitorCallback(c_feeder)

    BLSHelper.enter_fullscreen()
    BLSHelper.show_carbon(_carbon)

    ctl = {"run_ok": True}

    while ctl["run_ok"]:
        main(ctl, vc, _server)
        logging.info("sleep for %s seconds" % _freq)
        time.sleep(_freq)
