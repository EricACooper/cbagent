#!/usr/bin/env python

import logging
import logging.config
import time
import sys
import signal
import multiprocessing
from optparse import OptionParser

from metadata.visit import main as visit,\
    url_after, url_before, VISIT_ENTRY_FUNCS, retrieve_meta
import libcbtop.visitor_cb as vc
import libcbtop.paint as pt

USAGE = """./%prog HOST [options]

Monitor a couchbase cluster.

Examples:
    ./%prog                     -- defaults to 127.0.0.1
    ./%prog 10.2.1.65
    ./%prog 10.2.1.65 -i 4"""

HOST = "127.0.0.1"


def handle_signal(signum, frame):
    """
    Handles registered signals and exit.
    """
    logging.info("received signal %s, aborting" % signum)

    pt.exit_fullscreen()

    global ctl
    ctl["run_ok"] = False


def usage():
    print USAGE
    sys.exit(-1)


def main(ctl, server, port=8091, path="/pools/default"):

    visit_entry_func = VISIT_ENTRY_FUNCS.copy()
    visit_entry_func["collect_mc_stats"] = vc.collect_mc_stats

    visit(server, port, path,
          {"fast": vc.store_fast,
           "slow": vc.store_slow},
          {"url_before": url_before,
           "url_after": url_after},
          retrieve_funcs={"retrieve_data": vc.retrieve_data,
                          "retrieve_meta": retrieve_meta},
          entry_funcs=visit_entry_func, ctl=ctl)

if __name__ == "__main__":

    signal.signal(signal.SIGINT, handle_signal)

    logging.config.fileConfig("logging.conf")

    parser = OptionParser(usage=USAGE)
    parser.add_option("-i", "--itv", dest="itv", default="1",
                      help="stats polling interval (seconds)")
    (options, args) = parser.parse_args()

    if len(args) > 0:
        _server = args[0]
    else:
        _server = HOST

    try:
        _itv = int(options.itv)
    except ValueError, e:
        logging.error("invalid polling interval: %s" % options.itv)
        usage()

    vc.tbl.set_ftr("Last Update: %time")
    pt.enter_fullscreen()

    ctl = {"run_ok": True}

    mc_proc = multiprocessing.Process(target=vc.mc_worker,
                                      args=(vc.mc_jobs, ctl))
    mc_proc.daemon = True
    mc_proc.start()

    while ctl["run_ok"]:
        main(ctl, _server)
        pt.paint(vc.tbl)
        logging.info("sleep for %s seconds" % _itv)
        time.sleep(_itv)
