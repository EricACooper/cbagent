#!/usr/bin/env python

import logging
import time
import sys
import signal
from optparse import OptionParser

from metadata.visit import main, url_after, url_before, VISIT_ENTRY_FUNCS
from libcarbon.carbon_feeder import CarbonFeeder
from libcbtop.visitor_cb import VisitorCallback

def handle_signal(signum, frame):
    """
    Handles registered signals and exit.
    """
    logging.info("received signal %s, aborting" % signum)

    if VisitorCallback.C_FEEDER:
        VisitorCallback.C_FEEDER.flush()

    global RUN_OK
    RUN_OK = False

    signal.alarm(5)        # TODO: 5 seconds?

def usage():
    # TODO usage printout
    sys.exit(-1)

if __name__ == "__main__":

    RUN_OK = True
    signal.signal(signal.SIGINT, handle_signal)

    parser = OptionParser()
    parser.add_option("-f", "--freq", dest="freq", default="5",
        help="stats polling frequency (sec)")
    parser.add_option("-c", "--carbon", dest="carbon", default="127.0.0.1",
        help="hostname or ip address of the carbon stats server")
    parser.add_option("-s", "--server", dest="server", default="127.0.0.1",
        help="hostname or ip address of the target server")
    (options, args) = parser.parse_args()

    _carbon = options.carbon
    _server = options.server

    try:
        _freq = int(options.freq)
    except ValueError, e:
        logging.error("invalid polling freq: %s" % options.freq)
        usage()

    VisitorCallback.C_FEEDER = CarbonFeeder(_carbon)

    while RUN_OK:

        visit_entry_func = VISIT_ENTRY_FUNCS.copy()
        visit_entry_func["collect_mc_stats"] = \
            VisitorCallback.collect_mc_stats

        main(_server, 8091, "/pools/default",
             {"fast": VisitorCallback.store_fast,
              "slow": VisitorCallback.store_slow},
             {"url_before": url_before,
              "url_after": url_after},
             entry_funcs=visit_entry_func)

        logging.info("sleep for %s seconds" % _freq)
        time.sleep(_freq)